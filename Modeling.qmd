---
title: "Modeling"
format: html
---

```{r}
# packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(MASS)   # for mvrnorm in bootstrap
```

```{r}
library(nlme)
library(dplyr)

# canonicalize names
rootData <- rootData %>% rename(Midline = Midline, Length = Length, side = side, root = root, Genotype = Genotype)

# 4PL formula
form4pl <- Length ~ Lmin + (Lmax - Lmin) / (1 + exp(-(Midline - xmid)/s))

# robust start from global data
Lmin0 <- quantile(rootData$Length, 0.05, na.rm=TRUE)
Lmax0 <- quantile(rootData$Length, 0.95, na.rm=TRUE)
xmid0 <- median(rootData$Midline, na.rm=TRUE)
s0    <- (max(rootData$Midline, na.rm=TRUE) - min(rootData$Midline, na.rm=TRUE))/10

start0 <- list(Lmin = as.numeric(Lmin0), Lmax = as.numeric(Lmax0), xmid = as.numeric(xmid0), s = as.numeric(s0))

fixed_nls <- try(nls(form4pl, data = rootData, start = start0, control = nls.control(maxiter=500)), silent = TRUE)
if(inherits(fixed_nls, "try-error")) stop("Fixed-effects nls failed; paste the error here.")
summary(fixed_nls)

nls_per_root <- nlsList(Length ~ Lmin + (Lmax - Lmin)/(1 + exp(-(Midline - xmid)/s)) | root,
                        data = rootData,
                        start = start0)
summary(nls_per_root)


```

```{r}
library(dplyr)
library(purrr)

form4pl <- Length ~ Lmin + (Lmax - Lmin)/(1 + exp(-(Midline - xmid)/s))

# robust starts
start0 <- list(Lmin=5, Lmax=30, xmid=1000, s=100)

fits_side <- rootData %>%
  group_by(root, side) %>%
  group_map(~ {
    try(nls(form4pl, data=.x, start=start0,
            control=nls.control(maxiter=500, tol=1e-6)), silent=TRUE)
  })

coef_table <- map_dfr(fits_side, function(fit) {
  if (inherits(fit, "try-error")) {
    # return a named row of NAs
    return(data.frame(Lmin=NA, Lmax=NA, xmid=NA, s=NA))
  } else {
    # ensure coefficients come back as a named data frame
    co <- as.list(coef(fit))
    return(as.data.frame(co))
  }
})

# add identifiers back
ids <- rootData %>% distinct(root, side)
coef_table <- cbind(ids, coef_table)
head(coef_table)

delta_side <- coef_table %>%
  pivot_wider(names_from = side, values_from = c(Lmin, Lmax, xmid, s))
  



delta_side <- delta_side |>
   mutate(
    dLmin = Lmin_Outer - Lmin_Inner,
    dLmax = Lmax_Outer - Lmax_Inner,
    dxmid = xmid_Outer - xmid_Inner,
    ds    = s_Outer - s_Inner
  )
library(knitr)
delta_side |>
  kable()

```

```{r}
library(nlme)

# nlsList per root (4PL), require enough points per root
roots_table <- split(rootData, rootData$root)

# nlsList expects a formula with grouping
nls_list <- try(nlsList(Length ~ Lmin + (Lmax - Lmin)/(1 + exp(-(Midline - xmid)/s)) | root,
                       data = rootData,
                       start = start0,
                       control = nls.control(maxiter=400, tol=1e-6)),
                silent = TRUE)

if(inherits(nls_list, "try-error")) {
  message("nlsList failed. Try fitting nls per root manually to inspect problem roots.")
} else {
  print(summary(nls_list))
}

```

```{r}

library(dplyr)

with(subset(rootData, Genotype=="WT" & side=="inner"), 
     colSums(is.na(data.frame(Length, Midline))))


```

```{r}
library(nlme)
library(dplyr)
library(ggplot2)

# assume nls_list exists (from nlsList(... | root)) and rootData exists
# first inspect nls_list
summary(nls_list)

# 1. Try nlme using the nlsList object as start (random on Lmax only; very conservative)
nlme_try1 <- try(nlme(nls_list,
                      fixed = Lmin + Lmax + xmid + s ~ Genotype + side,
                      random = pdDiag(Lmax ~ 1),
                      data = rootData,
                      control = nlmeControl(maxIter = 200, pnlsMaxIter = 50)),
                 silent = TRUE)

if(!inherits(nlme_try1, "try-error")) {
  nlme_fit <- nlme_try1
  message("nlme succeeded: random on Lmax")
} else {
  message("nlme with random on Lmax failed. Trying random on Lmin + Lmax")
  nlme_try2 <- try(nlme(nls_list,
                        fixed = Lmin + Lmax + xmid + s ~ Genotype + side,
                        random = pdDiag(Lmin + Lmax ~ 1),
                        data = rootData,
                        control = nlmeControl(maxIter = 200, pnlsMaxIter = 50)),
                   silent = TRUE)
  if(!inherits(nlme_try2, "try-error")) {
    nlme_fit <- nlme_try2
    message("nlme succeeded: random on Lmin + Lmax")
  } else {
    stop("Both nlme attempts failed. Paste the nlme error output and I'll help.")
  }
}

# 2. Inspect fit
summary(nlme_fit)
VarCorr(nlme_fit)
intervals(nlme_fit)   # confidence intervals for fixed effects & variance components

# 3. Predicted curves (fixed-effects) for plotting and computing differences
mid_grid <- seq(min(rootData$Midline), max(rootData$Midline), length.out = 200)
pred_grid <- expand.grid(Midline = mid_grid,
                         Genotype = levels(rootData$Genotype),
                         side = levels(rootData$side),
                         stringsAsFactors = FALSE)
pred_grid$pred <- predict(nlme_fit, newdata = pred_grid, level = 0)   # fixed-effect predictions

# plot
ggplot(rootData, aes(x = Midline, y = Length, color = side)) +
  geom_point(alpha = 0.25, size = 1.2) +
  geom_line(data = pred_grid, aes(x = Midline, y = pred, color = side), size = 1.1) +
  facet_wrap(~ Genotype) + theme_bw() +
  labs(title = "NLME fixed-effect fitted curves")

# 4. Compute Outer - Inner predicted difference at representative midline values
mid_vals <- quantile(rootData$Midline, probs = c(0.25, 0.5, 0.75))
for(g in levels(rootData$Genotype)) {
  for(m in mid_vals) {
    p_in  <- predict(nlme_fit, newdata = data.frame(Midline = m, Genotype = g, side = levels(rootData$side)[1]), level = 0)
    p_out <- predict(nlme_fit, newdata = data.frame(Midline = m, Genotype = g, side = levels(rootData$side)[2]), level = 0)
    cat("Genotype:", g, "Midline:", round(m,1), "Outer-Inner =", round(p_out - p_in,3), "\n")
  }
}

# 5. Test whether Side and Genotype:Side matter at fixed-effect level:
#    Compare full fixed model vs model without side (or without interaction) using anova()
nlme_no_side <- update(nlme_fit, fixed = Lmin + Lmax + xmid + s ~ Genotype)   # drop side
anova(nlme_fit, nlme_no_side)   # LRT for adding side
# similarly test genotype:side interaction by fitting fixed = ~ Genotype + side (if you have interaction in fitted model, compare with smaller model)

```














